import json
import os
import uuid


class SubjectRepository:
    """
    Manages subject (materia) data persistence in a JSON file.
    Handles loading, saving, adding, updating, and deleting subjects.
    """

    def __init__(self, filepath='./storage/subjects.json'):
        """
        Initializes the repository.

        Args:
            filepath (str): The path to the JSON file where subject data is stored.
        """
        self.filepath = filepath
        # Ensure the storage directory exists
        os.makedirs(os.path.dirname(self.filepath), exist_ok=True)
        self.subjects_data = self._load_data()

    def _load_data(self):
        """
        Loads subject data from the JSON file.
        If the file doesn't exist or is empty, it initializes with default data (o una lista vacía).

        Returns:
            list: A list of subject dictionaries.
        """
        if not os.path.exists(self.filepath) or os.path.getsize(self.filepath) == 0:
            return []
        try:
            with open(self.filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            print(f"Error loading subject data from {self.filepath}: {e}")
            return []

    def _save_data(self, data=None):
        """
        Saves the subject data to the JSON file.

        Args:
            data (list, optional): The data to save. If None, saves self.subjects_data.
        """
        try:
            with open(self.filepath, 'w', encoding='utf-8') as f:
                json.dump(data if data is not None else self.subjects_data,
                          f, indent=4, ensure_ascii=False)
        except IOError as e:
            print(f"Error saving subject data to {self.filepath}: {e}")

    def get_all_subjects(self):
        """
        Retrieves all subjects.

        Returns:
            list: A list of lists, where each inner list represents a subject's
                  attributes [id, name, intensity_hours, requires_lab, 
                               assigned_teacher_id, time_slot].
        """
        return [
            [
                s.get("id"),
                s.get("name"),
                s.get("intensity_hours"),
                # Default to False if not present
                s.get("requires_lab", False),
                s.get("assigned_teacher_id"),
                s.get("time_slot")
            ] for s in self.subjects_data
        ]

    def get_subject_by_id(self, subject_id):
        """
        Finds a subject by its ID.

        Args:
            subject_id (str): The ID of the subject.

        Returns:
            list: A list of the subject's attributes if found, otherwise None.
        """
        subject_id_str = str(subject_id)
        for subject in self.subjects_data:
            if str(subject.get("id")) == subject_id_str:
                return [
                    subject.get("id"),
                    subject.get("name"),
                    subject.get("intensity_hours"),
                    subject.get("requires_lab", False),
                    subject.get("assigned_teacher_id"),
                    subject.get("time_slot")
                ]
        return None

    def subject_id_exists(self, subject_id):
        """
        Checks if a subject with the given ID already exists.

        Args:
            subject_id (str): The subject ID to check.

        Returns:
            bool: True if the subject ID exists, False otherwise.
        """
        subject_id_str = str(subject_id)
        return any(str(s.get("id")) == subject_id_str for s in self.subjects_data)

    def add_subject(self, subject_details):
        """
        Adds a new subject.

        Args:
            subject_details (list): Subject details in the format:
                                    [id, name, intensity_hours, requires_lab, 
                                     assigned_teacher_id, time_slot].
                                    The ID should be pre-generated by the UI.
        Returns:
            bool: True if added successfully, False if a subject with the same ID already exists.
        """
        subject_id = str(subject_details[0])
        if self.subject_id_exists(subject_id):
            # Esto no debería pasar si los UUIDs son únicos y la UI los genera bien.
            print(f"Warning: Attempted to add subject with existing ID: {
                  subject_id}")
            return False

        new_subject = {
            "id": subject_id,
            "name": str(subject_details[1]),
            "intensity_hours": int(subject_details[2]),
            "requires_lab": bool(subject_details[3]),
            "assigned_teacher_id": str(subject_details[4]) if subject_details[4] else None,
            "time_slot": str(subject_details[5])
        }
        self.subjects_data.append(new_subject)
        self._save_data()
        return True

    def update_subject(self, original_subject_id, updated_details):
        """
        Updates an existing subject. The subject ID cannot be changed.

        Args:
            original_subject_id (str): The original ID of the subject to update.
            updated_details (list): Updated details [id, name, intensity_hours, requires_lab, 
                                     assigned_teacher_id, time_slot].
                                    Note: The 'id' in updated_details should be the same as original_subject_id.
        Returns:
            bool: True if updated successfully. False if not found.
        """
        original_id_str = str(original_subject_id)
        new_id_str = str(updated_details[0])

        if new_id_str != original_id_str:
            print(f"Error: Subject ID cannot be changed. Original: {
                  original_id_str}, Attempted: {new_id_str}")
            return False  # ID should not be changed

        for i, subject in enumerate(self.subjects_data):
            if str(subject.get("id")) == original_id_str:
                self.subjects_data[i] = {
                    "id": new_id_str,  # Should be same as original_id_str
                    "name": str(updated_details[1]),
                    "intensity_hours": int(updated_details[2]),
                    "requires_lab": bool(updated_details[3]),
                    "assigned_teacher_id": str(updated_details[4]) if updated_details[4] else None,
                    "time_slot": str(updated_details[5])
                }
                self._save_data()
                return True
        return False  # Subject with original_subject_id not found

    def delete_subject(self, subject_id):
        """
        Deletes a subject by its ID.

        Args:
            subject_id (str): The ID of the subject to delete.

        Returns:
            bool: True if deleted successfully, False otherwise.
        """
        subject_id_str = str(subject_id)
        original_len = len(self.subjects_data)
        self.subjects_data = [s for s in self.subjects_data if str(
            s.get("id")) != subject_id_str]

        if len(self.subjects_data) < original_len:
            self._save_data()
            return True
        return False
